version: '3.9'

services:
  api-service:
    build: ./cortana-api-service
    container_name: cortana-api
    restart: always
    ports: ["8000:8000"]
    env_file: [.env]
    volumes:
      - ./cortana-api-service/app:/app/app
      - uploads-data:/app/uploads
      - db-data:/app/data
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=sqlite:////app/data/snapshot.db
      - REDIS_URL=redis://cortana-redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    networks: [cortana-net]
    command: >
      bash -c "
      pip install -r /app/requirements.txt >/dev/null 2>&1 || true &&
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --access-log --limit-max-requests 2147483648
      "
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/ >/dev/null || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 10s

  sampler-service:
    build: ./cortana-sampler-service
    container_name: cortana-sampler
    restart: always
    env_file: [.env]
    volumes:
      - ./cortana-sampler-service/app:/app/app
      - uploads-data:/app/uploads
      - db-data:/app/data
    environment:
      - DATABASE_URL=sqlite:////app/data/snapshot.db
      - REDIS_URL=redis://cortana-redis:6379/0
      - JOBS_CHANNEL=cortana-jobs
      - EVENT_SAMPLES=make-samples-from-video
      - EVENT_GREYSCALE=make-greyscale-from-samples
      - SAMPLE_THRESHOLD=0.08
      - TMP_DIR=/app/tmp
      - MODE=dev
    depends_on:
      redis:
        condition: service_healthy
      api-service:
        condition: service_healthy
    networks: [cortana-net]
    command: >
      bash -c "
      pip install -r /app/requirements.txt >/dev/null 2>&1 || true &&
      sleep 5 &&
      python -m pip install watchfiles >/dev/null 2>&1 || true &&
      watchfiles --ignore-paths /app/tmp --filter python 'python -m app.main' /app/app
      "
    healthcheck:
      test: ["CMD-SHELL", "echo 1"]
      interval: 5s
      timeout: 2s
      retries: 1
      start_period: 1s

  greyscale-service:
    build: ./cortana-greyscale-service
    container_name: cortana-greyscale
    restart: always
    env_file: [.env]
    volumes:
      - ./cortana-greyscale-service/app:/app/app
      - uploads-data:/app/uploads
      - db-data:/app/data
    environment:
      - DATABASE_URL=sqlite:////app/data/snapshot.db
      - REDIS_URL=redis://cortana-redis:6379/0
      - JOBS_CHANNEL=cortana-jobs
      - EVENT_GREYSCALE=make-greyscale-from-samples
      - EVENT_OCR=run-ocr-from-greyscaled-samples
      - TMP_DIR=/app/tmp
    depends_on:
      redis:
        condition: service_healthy
      api-service:
        condition: service_healthy
    networks: [cortana-net]
    command: >
      bash -c "
      if [ ! -f /tmp/installed ]; then
        pip install -r /app/requirements.txt >/dev/null 2>&1 && touch /tmp/installed;
      fi &&
      python -m app.main
      "
    healthcheck:
      test: ["CMD-SHELL", "echo 1"]
      interval: 5s
      timeout: 2s
      retries: 1
      start_period: 1s


  ocr-service:
    build: ./cortana-ocr-service
    container_name: cortana-ocr
    restart: always
    env_file: [.env]
    volumes:
      - ./cortana-ocr-service/app:/app/app
      - uploads-data:/app/uploads
      - db-data:/app/data
    environment:
      - DATABASE_URL=sqlite:////app/data/snapshot.db
      - REDIS_URL=redis://cortana-redis:6379/0
      - JOBS_CHANNEL=cortana-jobs
      - EVENTS_CHANNEL=cortana-events
      - EVENT_SAMPLES=make-samples-from-video
      - EVENT_GREYSCALE=make-greyscale-from-samples
      - EVENT_OCR=run-ocr-from-greyscaled-samples
      - EVENT_OCR_UPDATE=ocr-index-updated
      - TMP_DIR=/app/tmp
    depends_on:
      redis:
        condition: service_healthy
      api-service:
        condition: service_healthy
      greyscale-service:
        condition: service_healthy
    networks: [cortana-net]
    command: >
      bash -c "
      if [ ! -f /tmp/installed ]; then
        pip install -r /app/requirements.txt >/dev/null 2>&1 && touch /tmp/installed;
      fi &&
      python -m app.main
      "
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h cortana-redis ping"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 20s

  search-service:
    build: ./cortana-search-service
    container_name: cortana-search
    restart: always
    ports: ["8080:8080"]
    env_file: [./cortana-search-service/.env]
    volumes:
      - ./cortana-search-service/app:/app/app
      - db-data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      api-service:
        condition: service_healthy
    networks: [cortana-net]
    command: >
      bash -c "uvicorn app.main:app --host 0.0.0.0 --port 8080 --access-log"
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import socket; s=socket.create_connection(('localhost',8080),2.0); s.close()\""]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s

  next-service:
    build: ./cortana-next-service
    container_name: cortana-next
    restart: always
    ports: ["3000:3000"]
    volumes:
      - ./cortana-next-service:/app
      - node_modules_cache:/app/node_modules
      - ./data:/app/data
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_SEARCH_API_URL=http://cortana-search:8080
      - SEARCH_INTERNAL_URL=http://cortana-search:8080
      - SHELL=/bin/sh
    depends_on:
      api-service:
        condition: service_healthy
      search-service:
        condition: service_healthy
    networks: [cortana-net]
    command: >
      sh -c "
      if [ ! -d node_modules ]; then npm install; fi &&
      mkdir -p /app/.next &&
      chown -R node:node /app/.next &&
      npm run dev
      "
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  redis:
    image: redis:7
    container_name: cortana-redis
    restart: always
    ports: ["6379:6379"]
    volumes:
      - redis-data:/data
    networks: [cortana-net]
    command: ["redis-server", "--save", "60", "1000", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 2s
      retries: 20
      start_period: 3s

networks:
  cortana-net:
    driver: bridge

volumes:
  uploads-data:
  db-data:
  redis-data:
  node_modules_cache:
